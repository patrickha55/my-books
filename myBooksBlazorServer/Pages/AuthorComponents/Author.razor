@page "/authors"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h3>Author</h3>

@if (getAuthorsError)
{
    <span class="alert alert-danger">Unable to get authors from api.</span>
}
else
{
    <div class="">
        <table class="table table-hover table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th colspan="2"></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    @foreach (var author in authors)
                    {
                        <td>@author.Id</td>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td><a class="btn btn-warning" href="/authorEdit/@author.Id">Edit</a></td>
                        <td><a class="btn btn-danger" href="/authorEdit/@author.Id">Delete</a></td>
                    }
                </tr>
            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<AuthorDTO> authors = Array.Empty<AuthorDTO>();
    private bool getAuthorsError;
    private bool shouldRender;

    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:15203/api/authors/");

        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            authors = await JsonSerializer.DeserializeAsync<IEnumerable<AuthorDTO>>(responseStream);
        }
        else
        {
            getAuthorsError = true;
        }

        shouldRender = true;
    }
}
